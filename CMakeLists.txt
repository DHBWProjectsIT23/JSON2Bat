# - {ReqNonFunc1} - Can be built using:
#   - GNU-C/C++ 10.5.0+
#   - Clang 14.00+
#
# - {ReqOptFunc1} - Can be built using:
#   - "MinGW Makefiles" - gcc/g++
#   - "Ninja" 1.10.0+
#
# - {ReqNonFunc2} - Runs on Unix/WSL, tested with:
#   - GitHub Actions - Ubuntu Latest
#   - WSL Ubuntu
#   - Arch Linux
#
# - {ReqOptFunc3} - Runs on Windows, tested with:
#   - GitHub Actions - Windows Latest
#   - Windows 11
#
# - {ReqNonFunc3} - Software is configured/build using CMake

cmake_minimum_required(VERSION 3.16)

######## WINDOWS CHECK ########

if(WIN32)
  if(CMAKE_GENERATOR MATCHES "MinGW" OR CMAKE_GENERATOR MATCHES "Ninja")
      message(STATUS "MinGW or Ninja generator detected")
  else()
      # Other generators such as MSVC don't work/are not tested
      message(FATAL_ERROR "Generator other than MinGW or Ninja detected!\n"
              "Please use \"MinGW Makefiles\" or \"Ninja\" on Windows!")
  endif()
endif()

######## SETUP ########

# Set Name for project and executable
set(PROJECT_NAME JSON2Batch)
set(EXECUTABLE_NAME json2batch)

# Set basic CMAKE flags
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED true)
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# Avoid creation of default "myeasylog.log" on every run
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DELPP_NO_DEFAULT_LOG_FILE")

# Setting information for the generated files
set(AUTOGENERATED_WARNING
    "This file is autogenerated. Changes will be overwritten")
set(AUTHORS "Elena Schwarzbach, Max Rodler, Simon Blum, Sonia Sinaci")

# Initialize the project This information is also used to generate files
project(
  ${PROJECT_NAME}
  VERSION 0.3.1
  DESCRIPTION "A simple tool to convert json to batch."
  HOMEPAGE_URL "https://dhbwprojectsit23.github.io/JSON2Bat")

######## MAIN EXECUTABLE ########

# Configure Files
add_subdirectory(conf)

# Add sources for the main executable
set(SOURCES
    ${PROJECT_SOURCE_DIR}/src/main.cpp
    ${PROJECT_SOURCE_DIR}/src/sources/CommandLineHandler.cpp
    ${PROJECT_SOURCE_DIR}/src/sources/Utils.cpp
    ${PROJECT_SOURCE_DIR}/src/sources/BatchCreator.cpp
    ${PROJECT_SOURCE_DIR}/src/sources/FileData.cpp
    ${PROJECT_SOURCE_DIR}/src/sources/JsonHandler.cpp
        ${PROJECT_SOURCE_DIR}/src/sources/KeyValidator.cpp)

# Add main executable
add_executable(${EXECUTABLE_NAME} ${SOURCES})

# Add subdirectories
add_subdirectory(lib)

# Set include directories
target_include_directories(
  ${EXECUTABLE_NAME}
  PRIVATE ${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/src/include
          ${PROJECT_SOURCE_DIR}/src/include/utility
          ${PROJECT_SOURCE_DIR}/src/include/parsing)

if(UNIX)
  # CLI Styling is only used on Unix
  target_compile_definitions(${EXECUTABLE_NAME} PRIVATE IS_UNIX)
else()
  # CLI Styling is only used on Unix
  target_compile_definitions(${EXECUTABLE_NAME} PRIVATE IS_WINDOWS)
endif()

######## OTHER TARGETS ########

# Astyle will autoformat when building
find_program(ASTYLE_EXECUTABLE NAMES astyle)
if(ASTYLE_EXECUTABLE)
  add_custom_target(
          astyle
          COMMAND astyle -r ${PROJECT_SOURCE_DIR}/src/*.cpp,*.hpp
          VERBATIM)
  set_target_properties(astyle PROPERTIES EXCLUDE_FROM_ALL FALSE)
else()
  message(STATUS "Astyle executable not found")
endif()

# If doxygen is found, documentation can be generated by building the target
# doxygen_generate
find_package(Doxygen)
if(DOXYGEN_FOUND)
  set(DOXYGEN_IN ${PROJECT_SOURCE_DIR}/conf/Doxyfile.in)
  set(DOXYGEN_OUT ${PROJECT_SOURCE_DIR}/Doxyfile)
  configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
  add_custom_target(
          doxygen_generate
          COMMENT "Generating documentation with Doxygen..."
          COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
          WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
          VERBATIM)
else()
  message(STATUS "Doxygen not found, unable to build documentation")
endif()
